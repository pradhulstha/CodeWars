/*Some numbers have funny properties. For example:

89 --> 8¹ + 9² = 89 * 1

695 --> 6² + 9³ + 5⁴= 1390 = 695 * 2

46288 --> 4³ + 6⁴+ 2⁵ + 8⁶ + 8⁷ = 2360688 = 46288 * 51

Given a positive integer n written as abcd... (a, b, c, d... being digits) and a positive integer p we want to find a positive integer k, if it exists, such as the sum of the digits of n taken to the successive powers of p is equal to k * n. In other words:

Is there an integer k such as : (a ^ p + b ^ (p+1) + c ^(p+2) + d ^ (p+3) + ...) = n * k

If it is the case we will return k, if not return -1.

Note: n, p will always be given as strictly positive integers.

digPow(89, 1) should return 1 since 8¹ + 9² = 89 = 89 * 1
digPow(92, 1) should return -1 since there is no k such as 9¹ + 2² equals 92 * k
digPow(695, 2) should return 2 since 6² + 9³ + 5⁴= 1390 = 695 * 2
digPow(46288, 3) should return 51 since 4³ + 6⁴+ 2⁵ + 8⁶ + 8⁷ = 2360688 = 46288 * 51
*/

#include <iostream>
#include <math.h>

using namespace std;

class DigPow
{
public:
  static int digPow(int n, int p);
  static int digi_count(int num);
};

int DigPow::digPow(int n, int p)
{
  int digit;
  int sum = 0;
  int power = p;
  int number = n;
  digit = digi_count(n);
  int array[digit];
  
  for(int i = digit - 1; i >= 0; --i)
     {
        array[i] = number % 10;
        number /= 10;
      }
   for(int j = 0; j < digit; ++j)
      {
        array[j] = pow(array[j], power++);
       }
  for(int j = 0; j < digit; ++j)    
    {
      sum += array[j];
    }
    
  for(int j = 0; j < digit; ++j)    
    {
cout << array[j] << ", ";
     }
cout << endl;

 for(int j = 0; j < digit; ++j)    
    {
      array[j] = 0;
    }
   if(sum % n == 0 || sum % n == 1 && sum > n)
      return sum/n;
   else
      return -1;
   

}

int DigPow::digi_count(int num)
{
 int count = 0;
  while(num > 0)
   {
     num = num/10;
     ++count;
   }
 return count;
}
